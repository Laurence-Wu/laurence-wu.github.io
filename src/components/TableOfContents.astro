---
// TableOfContents component for blog and project pages
---

<div id="table-of-contents" class="toc-container">
  <div class="toc-header">
    <div class="toc-title-area">
      <span class="drag-handle" title="Drag to move">⋮⋮</span>
      <h3>Table of Contents</h3>
    </div>
    <button id="toc-toggle" class="toc-toggle" aria-label="Toggle table of contents">
      <span class="toggle-icon">←</span>
    </button>
  </div>
  <nav class="toc-nav" aria-label="Table of contents">
    <ul id="toc-list" class="toc-list">
      <!-- TOC items will be populated by JavaScript -->
    </ul>
  </nav>
</div>

<style>
  .toc-container {
    position: fixed;
    left: 20px;
    top: 50%;
    transform: translateY(-50%);
    width: 280px;
    max-height: 70vh;
    
    /* Clean, modern container */
    background: rgba(255, 255, 255, 0.95);
    border: 2px solid rgba(138, 154, 126, 0.3);
    border-radius: 12px;
    backdrop-filter: blur(10px);
    box-shadow: 
      0 10px 30px rgba(0, 0, 0, 0.1),
      0 4px 15px rgba(138, 154, 126, 0.2);
    
    z-index: 1000;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
    opacity: 1;
    cursor: move;
    user-select: none;
    will-change: transform;
  }
  
  /* Project page positioning - next to timeline */
  body.project-page .toc-container {
    left: 360px; /* Timeline width (320px) + gap (40px) */
    z-index: 999; /* Slightly lower than timeline */
  }
  
  /* Blog page positioning - on the left side */
  body.blog-page .toc-container {
    left: 20px;
    z-index: 1000;
  }
  
  .toc-container.dragging {
    transition: none;
    transform: translateY(-50%) scale(1.03);
    box-shadow: 
      0 25px 80px rgba(0, 0, 0, 0.25),
      0 15px 35px rgba(138, 154, 126, 0.35);
    z-index: 1002;
    cursor: grabbing;
  }
  
  .toc-container:hover {
    box-shadow: 
      0 15px 40px rgba(0, 0, 0, 0.15),
      0 6px 20px rgba(138, 154, 126, 0.3);
    transform: translateY(-50%) scale(1.01);
  }
  
  /* Default collapsed state - slide off to the left */
  .toc-container.collapsed {
    transform: translateY(-50%) translateX(-240px);
    opacity: 0.8;
    width: 60px; /* Just enough for the toggle button */
  }
  
  /* Project page collapsed state - slide off to the right */
  body.project-page .toc-container.collapsed {
    transform: translateY(-50%) translateX(260px); /* Move off-screen to the right */
    left: calc(100vw - 80px); /* Position near right edge */
    opacity: 0.9;
    width: 60px;
  }
  
  /* Blog page collapsed state - slide off to the left with button exposed */
  body.blog-page .toc-container.collapsed {
    transform: translateY(-50%) translateX(-240px);
    opacity: 0.9;
    width: 60px;
    left: 10px; /* Keep some margin from the edge */
  }
  
  .toc-container.collapsed:hover {
    opacity: 1;
  }
  
  /* Hover behavior for collapsed states */
  .toc-container.collapsed:hover {
    transform: translateY(-50%) translateX(-220px);
  }
  
  body.project-page .toc-container.collapsed:hover {
    transform: translateY(-50%) translateX(240px);
  }
  
  body.blog-page .toc-container.collapsed:hover {
    transform: translateY(-50%) translateX(-220px);
  }
  
  .toc-container.collapsed .toc-nav {
    opacity: 0;
    pointer-events: none;
  }
  
  .toc-container.collapsed .toc-header {
    padding: 1rem 0.5rem;
    justify-content: center;
  }
  
  .toc-container.collapsed .toc-title-area {
    display: none;
  }
  
  .toc-container.collapsed .toggle-icon {
    transform: rotate(180deg);
  }
  
  /* Project page collapsed toggle icon should point left */
  body.project-page .toc-container.collapsed .toggle-icon {
    transform: rotate(0deg); /* Point left when collapsed on project page */
  }
  
  .toc-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.25rem;
    background: linear-gradient(135deg, #2E3A59 0%, #39647c 100%);
    color: white;
    border-radius: 10px 10px 0 0;
    margin: 0;
    cursor: grab;
    user-select: none;
  }
  
  .toc-container.dragging .toc-header {
    cursor: grabbing;
  }
  
  .toc-title-area {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }
  
  .drag-handle {
    font-size: 1rem;
    color: rgba(255, 255, 255, 0.7);
    cursor: grab;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    writing-mode: vertical-rl;
    text-orientation: mixed;
    line-height: 0.8;
    font-weight: bold;
    padding: 0.25rem;
    border-radius: 4px;
  }
  
  .drag-handle:hover {
    color: rgba(255, 255, 255, 1);
    transform: scale(1.1);
    background: rgba(255, 255, 255, 0.1);
  }
  
  .toc-container.dragging .drag-handle {
    color: #F4E8D1;
    transform: scale(1.2);
    cursor: grabbing;
    background: rgba(244, 232, 209, 0.2);
  }
  
  .toc-header h3 {
    color: white;
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
    font-family: 'Montserrat', sans-serif;
  }
  
  .toc-toggle {
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: white;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 6px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
  }
  
  .toc-toggle:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
  }
  
  .toggle-icon {
    font-size: 1rem;
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .toc-nav {
    max-height: calc(70vh - 80px);
    overflow-y: auto;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.95);
  }
  
  .toc-nav::-webkit-scrollbar {
    width: 6px;
  }
  
  .toc-nav::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.05);
    border-radius: 3px;
  }
  
  .toc-nav::-webkit-scrollbar-thumb {
    background: rgba(138, 154, 126, 0.6);
    border-radius: 3px;
  }
  
  .toc-nav::-webkit-scrollbar-thumb:hover {
    background: rgba(138, 154, 126, 0.8);
  }
  
  .toc-list {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 8px;
  }
  
  .toc-item {
    margin: 0;
    border-radius: 8px;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    background: rgba(244, 232, 209, 0.3);
    border: 1px solid rgba(138, 154, 126, 0.2);
  }
  
  .toc-item:hover {
    background: rgba(244, 232, 209, 0.6);
    border-color: rgba(138, 154, 126, 0.4);
    transform: translateX(4px);
  }
  
  .toc-item.active {
    background: rgba(138, 154, 126, 0.2);
    border-color: #8A9A7E;
  }
  
  .toc-link {
    display: block;
    padding: 0.75rem 1rem;
    color: #2E3A59;
    text-decoration: none;
    font-size: 0.9rem;
    line-height: 1.4;
    font-weight: 500;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border-radius: 8px;
    font-family: 'Montserrat', sans-serif;
  }
  
  .toc-link:hover {
    color: #39647c;
    background: rgba(255, 255, 255, 0.5);
  }
  
  .toc-link.active {
    color: #2E3A59;
    background: rgba(255, 255, 255, 0.8);
    font-weight: 600;
  }
  
  /* Hierarchy levels with simple indentation */
  .toc-link[data-level="1"] {
    font-size: 0.95rem;
    font-weight: 600;
    color: #2E3A59;
  }
  
  .toc-link[data-level="2"] {
    padding-left: 1.5rem;
    font-size: 0.85rem;
    color: #39647c;
  }
  
  .toc-link[data-level="3"] {
    padding-left: 2rem;
    font-size: 0.8rem;
    color: #39647c;
  }
  
  .toc-link[data-level="4"],
  .toc-link[data-level="5"],
  .toc-link[data-level="6"] {
    padding-left: 2.5rem;
    font-size: 0.75rem;
    color: #666;
  }
  
  /* Mobile responsive - hide TOC on smaller screens */
  @media (max-width: 1200px) {
    .toc-container {
      display: none;
    }
  }
  
  /* Smooth reveal animation */
  .toc-container {
    animation: slideInFromLeft 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  @keyframes slideInFromLeft {
    from {
      transform: translateY(-50%) translateX(-100%);
      opacity: 0;
    }
    to {
      transform: translateY(-50%) translateX(0);
      opacity: 1;
    }
  }
  
  /* Visual feedback during drag */
  .toc-container.drag-preview {
    opacity: 0.8;
    filter: brightness(1.1);
  }
  
  /* Smooth snap-back animation */
  .toc-container.snap-back {
    transition: transform 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }
</style>

<script>
  // @ts-nocheck
  class TableOfContents {
    constructor() {
      this.tocContainer = document.getElementById('table-of-contents');
      this.tocList = document.getElementById('toc-list');
      this.tocToggle = document.getElementById('toc-toggle');
      
      if (!this.tocContainer || !this.tocList) return;
      
      this.headings = [];
      this.currentActiveId = null;
      
      // Enhanced drag functionality properties
      this.isDragging = false;
      this.dragStartX = 0;
      this.dragStartY = 0;
      this.currentX = 0;
      this.currentY = 0;
      this.initialX = 0;
      this.initialY = 0;
      this.lastMoveTime = 0;
      this.velocity = { x: 0, y: 0 };
      this.animationFrame = null;
      
      // Drag constraints
      this.dragBounds = {
        minX: 0,
        maxX: 0,
        minY: 0,
        maxY: 0
      };
      
      this.init();
    }
    
    init() {
      this.extractHeadings();
      this.buildTOC();
      this.setupEventListeners();
      this.setupDragListeners();
      this.updateActiveSection();
      this.restorePosition();
      this.calculateDragBounds();
      this.detectPageType();
      
      // Hide TOC if no headings found
      if (this.headings.length === 0) {
        this.tocContainer.style.display = 'none';
      }
    }
    
    detectPageType() {
      // Check if we're on an individual project page (should behave like blog pages)
      const isIndividualProjectPage = window.location.pathname.includes('/projects/') && 
                                     !window.location.pathname.endsWith('/projects/') &&
                                     !window.location.pathname.endsWith('/projects');
      
      // Check if we're on the projects index page (timeline view)
      const isProjectsIndexPage = window.location.pathname.endsWith('/projects/') || 
                                 window.location.pathname.endsWith('/projects');
      
      // Check if we're on a blog page
      const isBlogPage = window.location.pathname.includes('/blog/') && 
                        !window.location.pathname.endsWith('/blog/') &&
                        !window.location.pathname.endsWith('/blog');
      
      if (isProjectsIndexPage) {
        document.body.classList.add('project-page');
      } else if (isIndividualProjectPage || isBlogPage) {
        // Both individual project pages and blog pages behave the same way
        document.body.classList.add('blog-page');
      }
    }
    
    extractHeadings() {
      // Look for headings in content areas
      const contentAreas = [
        '.project-content',
        '.post-content', 
        'main article',
        'main'
      ];
      
      let contentArea = null;
      for (const selector of contentAreas) {
        contentArea = document.querySelector(selector);
        if (contentArea) break;
      }
      
      if (!contentArea) return;
      
      const headingElements = contentArea.querySelectorAll('h1, h2, h3, h4, h5, h6');
      
      this.headings = Array.from(headingElements).map((heading, index) => {
        // Create an ID if one doesn't exist
        if (!heading.id) {
          const text = heading.textContent || '';
          heading.id = `heading-${index}-${text.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '')}`;
        }
        
        return {
          element: heading,
          id: heading.id,
          text: heading.textContent || '',
          level: parseInt(heading.tagName.charAt(1))
        };
      });
    }
    
    buildTOC() {
      if (this.headings.length === 0) return;
      
      this.tocList.innerHTML = '';
      
      this.headings.forEach((heading) => {
        const li = document.createElement('li');
        li.className = 'toc-item';
        
        const a = document.createElement('a');
        a.href = `#${heading.id}`;
        a.className = 'toc-link';
        a.textContent = heading.text;
        a.setAttribute('data-level', heading.level.toString());
        
        a.addEventListener('click', (e) => {
          e.preventDefault();
          this.scrollToHeading(heading.id);
        });
        
        li.appendChild(a);
        this.tocList.appendChild(li);
      });
    }
    
    setupEventListeners() {
      // Toggle TOC visibility
      if (this.tocToggle) {
        this.tocToggle.addEventListener('click', () => {
          this.tocContainer.classList.toggle('collapsed');
          
          // Note: Removed localStorage save - status resets on page refresh
        });
        
        // Note: Removed localStorage restoration - always start expanded
      }
      
      // Update active section on scroll with throttling
      let ticking = false;
      window.addEventListener('scroll', () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            this.updateActiveSection();
            ticking = false;
          });
          ticking = true;
        }
      });
      
      // Recalculate bounds on window resize
      window.addEventListener('resize', () => {
        this.calculateDragBounds();
      });
    }
    
    calculateDragBounds() {
      const containerRect = this.tocContainer.getBoundingClientRect();
      const margin = 20;
      
      this.dragBounds = {
        minX: -containerRect.width / 2 + margin,
        maxX: window.innerWidth - containerRect.width / 2 - margin,
        minY: -containerRect.height / 2 + margin,
        maxY: window.innerHeight - containerRect.height / 2 - margin
      };
    }
    
    updateActiveSection() {
      if (this.headings.length === 0) return;
      
      const scrollPosition = window.scrollY + 100;
      let activeHeading = null;
      
      // Find the currently visible heading
      for (let i = this.headings.length - 1; i >= 0; i--) {
        const heading = this.headings[i];
        const element = heading.element;
        
        if (element.offsetTop <= scrollPosition) {
          activeHeading = heading;
          break;
        }
      }
      
      // Update active state
      if (activeHeading && activeHeading.id !== this.currentActiveId) {
        // Remove previous active state
        const previousActive = this.tocList.querySelector('.toc-link.active');
        const previousItem = this.tocList.querySelector('.toc-item.active');
        if (previousActive) previousActive.classList.remove('active');
        if (previousItem) previousItem.classList.remove('active');
        
        // Add new active state
        const newActive = this.tocList.querySelector(`[href="#${activeHeading.id}"]`);
        if (newActive) {
          newActive.classList.add('active');
          newActive.parentElement.classList.add('active');
          
          // Scroll TOC to show active item
          this.scrollTOCToActiveItem(newActive);
        }
        
        this.currentActiveId = activeHeading.id;
      }
    }
    
    scrollTOCToActiveItem(activeLink) {
      const tocNav = this.tocContainer.querySelector('.toc-nav');
      if (!tocNav) return;
      
      const activeRect = activeLink.getBoundingClientRect();
      const navRect = tocNav.getBoundingClientRect();
      
      if (activeRect.top < navRect.top || activeRect.bottom > navRect.bottom) {
        const scrollTop = activeLink.offsetTop - tocNav.offsetTop - tocNav.clientHeight / 2 + activeLink.clientHeight / 2;
        tocNav.scrollTo({
          top: scrollTop,
          behavior: 'smooth'
        });
      }
    }
    
    scrollToHeading(id) {
      const element = document.getElementById(id);
      if (!element) return;
      
      const headerOffset = 80;
      const elementPosition = element.offsetTop - headerOffset;
      
      window.scrollTo({
        top: elementPosition,
        behavior: 'smooth'
      });
      
      // Update URL without triggering scroll
      if (history.pushState) {
        history.pushState(null, null, `#${id}`);
      }
    }
    
    setupDragListeners() {
      // Mouse events
      this.tocContainer.addEventListener('mousedown', this.dragStart.bind(this));
      document.addEventListener('mousemove', this.dragMove.bind(this));
      document.addEventListener('mouseup', this.dragEnd.bind(this));
      
      // Touch events for mobile with passive: false for preventDefault
      this.tocContainer.addEventListener('touchstart', this.dragStart.bind(this), { passive: false });
      document.addEventListener('touchmove', this.dragMove.bind(this), { passive: false });
      document.addEventListener('touchend', this.dragEnd.bind(this));
      
      // Prevent default drag behavior on images/links
      this.tocContainer.addEventListener('dragstart', (e) => e.preventDefault());
    }
    
    dragStart(e) {
      // Don't start drag if clicking on toggle button or links
      if (e.target.closest('.toc-toggle') || e.target.closest('.toc-link')) {
        return;
      }
      
      // Don't start drag if clicking in the navigation area (but allow header drag)
      if (e.target.closest('.toc-nav') && !e.target.closest('.toc-header')) {
        return;
      }
      
      this.isDragging = true;
      this.tocContainer.classList.add('dragging');
      this.tocContainer.classList.add('drag-preview');
      
      const clientX = e.type === 'touchstart' ? e.touches[0].clientX : e.clientX;
      const clientY = e.type === 'touchstart' ? e.touches[0].clientY : e.clientY;
      
      // Get current position from transform
      const style = window.getComputedStyle(this.tocContainer);
      const matrix = new DOMMatrix(style.transform);
      this.currentX = matrix.m41; // current translateX
      this.currentY = matrix.m42; // current translateY
      
      // Calculate drag offset from current position to maintain position
      this.dragStartX = clientX - this.currentX;
      this.dragStartY = clientY - this.currentY;
      
      this.lastMoveTime = Date.now();
      this.velocity = { x: 0, y: 0 };
      
      // Calculate drag bounds
      this.calculateDragBounds();
      
      e.preventDefault();
    }
    
    dragMove(e) {
      if (!this.isDragging) return;
      
      e.preventDefault();
      
      const clientX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;
      const clientY = e.type === 'touchmove' ? e.touches[0].clientY : e.clientY;
      
      const newX = clientX - this.dragStartX;
      const newY = clientY - this.dragStartY;
      
      // Calculate velocity for smooth momentum
      const currentTime = Date.now();
      const deltaTime = currentTime - this.lastMoveTime;
      
      if (deltaTime > 0) {
        this.velocity.x = (newX - this.currentX) / deltaTime * 1000;
        this.velocity.y = (newY - this.currentY) / deltaTime * 1000;
      }
      
      this.currentX = newX;
      this.currentY = newY;
      this.lastMoveTime = currentTime;
      
      // Constrain to viewport with elastic bounds
      this.currentX = Math.max(this.dragBounds.minX, 
                              Math.min(this.dragBounds.maxX, this.currentX));
      this.currentY = Math.max(this.dragBounds.minY, 
                              Math.min(this.dragBounds.maxY, this.currentY));
      
      // Use transform3d for better performance
      this.tocContainer.style.transform = `translate3d(${this.currentX}px, ${this.currentY}px, 0)`;
    }
    
    dragEnd(e) {
      if (!this.isDragging) return;
      
      this.isDragging = false;
      this.tocContainer.classList.remove('dragging');
      this.tocContainer.classList.remove('drag-preview');
      
      // Add snap-back class for smooth transition
      this.tocContainer.classList.add('snap-back');
      setTimeout(() => {
        this.tocContainer.classList.remove('snap-back');
      }, 400);
      
      // Apply momentum if velocity is high enough
      const velocityThreshold = 500;
      if (Math.abs(this.velocity.x) > velocityThreshold || Math.abs(this.velocity.y) > velocityThreshold) {
        this.applyMomentum();
      }
      
      // Save position to localStorage
      this.savePosition();
      
      e.preventDefault();
    }
    
    applyMomentum() {
      const friction = 0.95;
      const minVelocity = 0.1;
      
      const animate = () => {
        this.velocity.x *= friction;
        this.velocity.y *= friction;
        
        this.currentX += this.velocity.x * 0.016; // 60fps
        this.currentY += this.velocity.y * 0.016;
        
        // Constrain to bounds
        this.currentX = Math.max(this.dragBounds.minX, 
                                Math.min(this.dragBounds.maxX, this.currentX));
        this.currentY = Math.max(this.dragBounds.minY, 
                                Math.min(this.dragBounds.maxY, this.currentY));
        
        this.tocContainer.style.transform = `translate3d(${this.currentX}px, ${this.currentY}px, 0)`;
        
        if (Math.abs(this.velocity.x) > minVelocity || Math.abs(this.velocity.y) > minVelocity) {
          this.animationFrame = requestAnimationFrame(animate);
        } else {
          this.savePosition();
        }
      };
      
      if (this.animationFrame) {
        cancelAnimationFrame(this.animationFrame);
      }
      this.animationFrame = requestAnimationFrame(animate);
    }
    
    savePosition() {
      const isIndividualProjectPage = window.location.pathname.includes('/projects/') && 
                                     !window.location.pathname.endsWith('/projects/') &&
                                     !window.location.pathname.endsWith('/projects');
      const isProjectsIndexPage = window.location.pathname.endsWith('/projects/') || 
                                 window.location.pathname.endsWith('/projects');
      const isBlogPage = window.location.pathname.includes('/blog/') && 
                        !window.location.pathname.endsWith('/blog/') &&
                        !window.location.pathname.endsWith('/blog');
      
      const position = {
        x: this.currentX,
        y: this.currentY,
        isProjectsIndexPage: isProjectsIndexPage,
        isBlogLikePage: isIndividualProjectPage || isBlogPage
      };
      localStorage.setItem('toc-position', JSON.stringify(position));
    }
    
    restorePosition() {
      const savedPosition = localStorage.getItem('toc-position');
      if (savedPosition) {
        try {
          const position = JSON.parse(savedPosition);
          
          const isIndividualProjectPage = window.location.pathname.includes('/projects/') && 
                                         !window.location.pathname.endsWith('/projects/') &&
                                         !window.location.pathname.endsWith('/projects');
          const isProjectsIndexPage = window.location.pathname.endsWith('/projects/') || 
                                     window.location.pathname.endsWith('/projects');
          const isBlogPage = window.location.pathname.includes('/blog/') && 
                            !window.location.pathname.endsWith('/blog/') &&
                            !window.location.pathname.endsWith('/blog');
          
          const currentIsBlogLikePage = isIndividualProjectPage || isBlogPage;
          
          // Only restore position if page type matches
          if (position.isProjectsIndexPage === isProjectsIndexPage && 
              position.isBlogLikePage === currentIsBlogLikePage) {
            this.currentX = position.x || 0;
            this.currentY = position.y || 0;
            
            // Validate position is still within viewport
            this.calculateDragBounds();
            
            if (this.currentX < this.dragBounds.minX || 
                this.currentX > this.dragBounds.maxX ||
                this.currentY < this.dragBounds.minY || 
                this.currentY > this.dragBounds.maxY) {
              // Reset to default position if out of bounds
              this.currentX = 0;
              this.currentY = 0;
            }
            
            this.tocContainer.style.transform = `translate3d(${this.currentX}px, ${this.currentY}px, 0)`;
          }
              } catch (e) {
        // Failed to restore TOC position
      }
      }
    }
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new TableOfContents();
  });
  
  // Reinitialize for dynamic content
  document.addEventListener('astro:page-load', () => {
    new TableOfContents();
  });
</script> 