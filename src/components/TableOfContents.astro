---
// TableOfContents component for blog and project pages
---

<div id="table-of-contents" class="toc-container">
  <div class="toc-header">
    <h3>Table of Contents</h3>
    <button id="toc-toggle" class="toc-toggle" aria-label="Toggle table of contents">
      <span class="toggle-icon">‚Üê</span>
    </button>
  </div>
  <nav class="toc-nav" aria-label="Table of contents">
    <ul id="toc-list" class="toc-list">
      <!-- TOC items will be populated by JavaScript -->
    </ul>
  </nav>
</div>

<style>
  .toc-container {
    position: fixed;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 300px;
    max-height: 75vh;
    
    /* High contrast solid background */
    background: #ffffff;
    border: 3px solid #000000;
    border-radius: 12px;
    
    /* Strong shadow for depth and contrast */
    box-shadow: 
      0 10px 40px rgba(0, 0, 0, 0.4),
      0 4px 16px rgba(0, 0, 0, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 1);
      
    z-index: 1000;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
    
    /* Full visibility for high contrast */
    opacity: 1;
  }
  
  /* Container hover effect - enhanced contrast */
  .toc-container:hover {
    transform: translateY(-50%) scale(1.03);
    background: #ffffff;
    border-color: #1f2937;
    box-shadow: 
      0 15px 60px rgba(0, 0, 0, 0.5),
      0 6px 24px rgba(0, 0, 0, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 1);
  }
  
  .toc-container.collapsed {
    transform: translateY(-50%) translateX(-260px);
    opacity: 0.5;
  }
  
  .toc-container.collapsed:hover {
    transform: translateY(-50%) translateX(-260px) scale(1.02);
    opacity: 0.8;
  }
  
  .toc-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.2rem 1.5rem;
    
    /* High contrast header */
    background: #000000;
    color: #ffffff;
    border-radius: 12px 12px 0 0;
    border-bottom: 2px solid #333333;
    
    transition: all 0.3s ease;
  }
  
  .toc-container:hover .toc-header {
    background: rgba(30, 30, 50, 0.9);
    color: white;
  }
  
  .toc-header h3 {
    color: #ffffff !important;

    margin: 0;
    font-size: 1.1rem;
    font-weight: 800;
    letter-spacing: 0.02em;
  }
  
  .toc-toggle {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: rgba(255, 255, 255, 0.9);
    cursor: pointer;
    padding: 0.4rem;
    border-radius: 6px;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
  }
  
  .toc-toggle:hover {
    background: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.4);
    transform: scale(1.1);
  }
  
  .toggle-icon {
    font-size: 1.2rem;
    transition: transform 0.3s ease;
  }
  
  .toc-container.collapsed .toggle-icon {
    transform: rotate(180deg);
  }
  
  .toc-nav {
    max-height: calc(75vh - 80px);
    overflow-y: auto;
    padding: 0.8rem 0;
    background: rgba(0, 0, 0, 0.02);
  }
  
  .toc-nav::-webkit-scrollbar {
    width: 6px;
  }
  
  .toc-nav::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 3px;
  }
  
  .toc-nav::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 3px;
    transition: background 0.3s ease;
  }
  
  .toc-nav::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.5);
  }
  
  .toc-list {
    list-style: none;
    margin: 0;
    padding: 0.5rem 0;
    display: flex;
    flex-direction: column;
    gap: 2px;
  }
  
  .toc-item {
    position: relative;
    margin: 0;
    border-radius: 8px;
    overflow: hidden;
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    
    /* High contrast solid background */
    background: #ffffff;
    border: 2px solid #d1d5db;
    box-shadow: 
      0 2px 8px rgba(0, 0, 0, 0.2),
      0 1px 3px rgba(0, 0, 0, 0.15);
  }


  .toc-item:hover {
    transform: translateX(8px) translateY(-2px);
    background: #f8fafc;
    border-color: #374151;
    box-shadow: 
      0 10px 30px rgba(0, 0, 0, 0.3),
      0 6px 16px rgba(0, 0, 0, 0.2),
      0 0 0 3px rgba(55, 65, 81, 0.2);
  }
  
  .toc-item::before {
    content: '';
    color: #000000;
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 4px;
    background: linear-gradient(135deg, #6366f1 0%, #4f46e5 50%, #3730a3 100%);
    transform: scaleY(0);
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    border-radius: 0 4px 4px 0;
    box-shadow: 0 0 8px rgba(99, 102, 241, 0.3);
  }
  
  .toc-item:hover::before {
    transform: scaleY(1);
  }
  
  /* High contrast design - no gradient overlays needed */
  
  .toc-link {
    display: flex;
    align-items: center;
    padding: 0.85rem 1.25rem 0.85rem 2.25rem;
    color: #000000 !important;
    text-decoration: none;
    font-size: 0.95rem;
    line-height: 1.5;
    font-weight: 600;
    letter-spacing: -0.01em;
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    position: relative;
    z-index: 1;
  }
  
  .toc-link::before {
    content: '';
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #000000;
    margin-right: 0.75rem;
    transition: all 0.3s ease;
    flex-shrink: 0;
    border: 2px solid #ffffff;
    box-shadow: 0 0 0 1px #000000;
  }
  
  .toc-link:hover {
    color: #ffffff;
    background: #000000;
    font-weight: 700;
    transform: translateX(4px);
  }
  
  .toc-link:hover::before {
    background: #ffffff;
    border-color: #000000;
    transform: scale(1.2);
    box-shadow: 0 0 0 2px #000000;
  }
  
  .toc-link.active {
    background: #1f2937;
    color: #ffffff;
    font-weight: 700;
    border: 2px solid #000000;
  }
  
  .toc-link.active::before {
    background: #ffffff;
    border-color: #1f2937;
    transform: scale(1.3);
    box-shadow: 0 0 0 2px #000000;
  }
  
  /* High contrast hierarchy levels */
  .toc-link[data-level="1"] {
    padding: 1rem 1.5rem 1rem 2.5rem;
    font-size: 1rem;
    font-weight: 700;
    color: #000000 !important;
    border-left: 4px solid #000000;
  }
  
  .toc-link[data-level="1"]::before {
    width: 10px;
    height: 10px;
    background: #000000;
    border: 2px solid #ffffff;
    box-shadow: 0 0 0 2px #000000;
  }
  
  .toc-link[data-level="2"] {
    padding-left: 3rem;
    font-size: 0.92rem;
    color: #000000 !important;
    font-weight: 600;
    border-left: 3px solid #4b5563;
  }
  
  .toc-link[data-level="2"]::before {
    width: 8px;
    height: 8px;
    background: #000000;
    border: 2px solid #ffffff;
    box-shadow: 0 0 0 1px #000000;
  }
  
  .toc-link[data-level="3"] {
    padding-left: 3.75rem;
    font-size: 0.88rem;
    color: #000000 !important;
    font-weight: 600;
    border-left: 2px solid #6b7280;
  }
  
  .toc-link[data-level="3"]::before {
    width: 6px;
    height: 6px;
    background: #000000;
    border: 1px solid #ffffff;
    box-shadow: 0 0 0 1px #000000;
  }
  
  .toc-link[data-level="4"] {
    padding-left: 4.5rem;
    font-size: 0.84rem;
    color: #000000 !important;
    font-weight: 600;
    border-left: 2px solid #9ca3af;
  }
  
  .toc-link[data-level="4"]::before {
    width: 5px;
    height: 5px;
    background: #000000;
    border: 1px solid #ffffff;
    box-shadow: 0 0 0 1px #000000;
  }
  
  .toc-link[data-level="5"],
  .toc-link[data-level="6"] {
    padding-left: 5.25rem;
    font-size: 0.8rem;
    color: #000000 !important;
    font-weight: 600;
    border-left: 1px solid #d1d5db;
  }
  
  .toc-link[data-level="5"]::before,
  .toc-link[data-level="6"]::before {
    width: 4px;
    height: 4px;
    background: #000000;
    border: 1px solid #ffffff;
    box-shadow: 0 0 0 1px #000000;
  }
  
  /* High contrast hover states for all levels */
  .toc-link[data-level="1"]:hover,
  .toc-link[data-level="2"]:hover,
  .toc-link[data-level="3"]:hover,
  .toc-link[data-level="4"]:hover,
  .toc-link[data-level="5"]:hover,
  .toc-link[data-level="6"]:hover {
    color: #ffffff;
    background: #000000;
  }
  
  /* High contrast active states for all levels */
  .toc-link[data-level="1"].active,
  .toc-link[data-level="2"].active,
  .toc-link[data-level="3"].active,
  .toc-link[data-level="4"].active,
  .toc-link[data-level="5"].active,
  .toc-link[data-level="6"].active {
    color: #ffffff;
    background: #1f2937;
    border: 2px solid #000000;
  }
  
  /* Mobile responsive */
  @media (max-width: 1200px) {
    .toc-container {
      display: none;
    }
  }
  
  /* Smooth reveal animation */
  .toc-container {
    animation: slideInFromLeft 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  @keyframes slideInFromLeft {
    from {
      transform: translateY(-50%) translateX(-100%);
      opacity: 0;
    }
    to {
      transform: translateY(-50%) translateX(0);
      opacity: 0.7;
    }
  }
  
  /* Enhanced fade in animation for TOC items */
  .toc-link {
    opacity: 0;
    animation: fadeInUp 0.4s ease forwards;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(15px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Stagger animation delays */
  .toc-link:nth-child(1) { animation-delay: 0.1s; }
  .toc-link:nth-child(2) { animation-delay: 0.15s; }
  .toc-link:nth-child(3) { animation-delay: 0.2s; }
  .toc-link:nth-child(4) { animation-delay: 0.25s; }
  .toc-link:nth-child(5) { animation-delay: 0.3s; }
  .toc-link:nth-child(6) { animation-delay: 0.35s; }
  .toc-link:nth-child(7) { animation-delay: 0.4s; }
  .toc-link:nth-child(8) { animation-delay: 0.45s; }
  .toc-link:nth-child(n+9) { animation-delay: 0.5s; }
  
  /* Glass morphism effect enhancement on container hover */
  .toc-container:hover .toc-nav {
    background: rgba(255, 255, 255, 0.03);
  }
  
  /* Subtle animation for the entire container */
  .toc-container::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, 
      rgba(59, 130, 246, 0.05) 0%, 
      transparent 25%, 
      transparent 75%, 
      rgba(59, 130, 246, 0.05) 100%);
    opacity: 0;
    transition: opacity 0.4s ease;
    pointer-events: none;
    z-index: -1;
  }
  
  .toc-container:hover::after {
    opacity: 1;
  }
  
  /* FORCE BLACK TEXT - NUCLEAR OPTION - OVERRIDE EVERYTHING */
  [data-astro-cid-xvrfupwn] .toc-link,
  [data-astro-cid-xvrfupwn] .toc-link:link,
  [data-astro-cid-xvrfupwn] .toc-link:visited,
  [data-astro-cid-xvrfupwn] .toc-link:hover,
  [data-astro-cid-xvrfupwn] .toc-link:active,
  [data-astro-cid-xvrfupwn] .toc-link.active,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="1"],
  [data-astro-cid-xvrfupwn] .toc-link[data-level="1"]:link,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="1"]:visited,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="1"]:hover,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="1"]:active,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="1"].active,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="2"], 
  [data-astro-cid-xvrfupwn] .toc-link[data-level="2"]:link,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="2"]:visited,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="2"]:hover,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="2"]:active,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="2"].active,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="3"],
  [data-astro-cid-xvrfupwn] .toc-link[data-level="3"]:link,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="3"]:visited,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="3"]:hover,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="3"]:active,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="3"].active,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="4"],
  [data-astro-cid-xvrfupwn] .toc-link[data-level="4"]:link,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="4"]:visited,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="4"]:hover,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="4"]:active,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="4"].active,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="5"],
  [data-astro-cid-xvrfupwn] .toc-link[data-level="5"]:link,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="5"]:visited,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="5"]:hover,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="5"]:active,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="5"].active,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="6"],
  [data-astro-cid-xvrfupwn] .toc-link[data-level="6"]:link,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="6"]:visited,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="6"]:hover,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="6"]:active,
  [data-astro-cid-xvrfupwn] .toc-link[data-level="6"].active {
    color: #000000 !important;
    --color-gold: #000000 !important;
    --gold-accent: #000000 !important;
  }
</style>

<script>
  // @ts-nocheck
  class TableOfContents {
    constructor() {
      this.tocContainer = document.getElementById('table-of-contents');
      this.tocList = document.getElementById('toc-list');
      this.tocToggle = document.getElementById('toc-toggle');
      
      if (!this.tocContainer || !this.tocList) return;
      
      this.headings = [];
      this.currentActiveId = null;
      
      this.init();
    }
    
    init() {
      this.extractHeadings();
      this.buildTOC();
      this.setupEventListeners();
      this.updateActiveSection();
      
      // Hide TOC if no headings found
      if (this.headings.length === 0) {
        this.tocContainer.style.display = 'none';
      }
    }
    
    extractHeadings() {
      // Look for headings in both blog content and project content areas
      const contentAreas = [
        '.post-content',
        '.project-content',
        'main article',
        'main'
      ];
      
      let contentArea = null;
      for (const selector of contentAreas) {
        contentArea = document.querySelector(selector);
        if (contentArea) break;
      }
      
      if (!contentArea) return;
      
      const headingElements = contentArea.querySelectorAll('h1, h2, h3, h4, h5, h6');
      
      this.headings = Array.from(headingElements).map((heading, index) => {
        // Create an ID if one doesn't exist
        if (!heading.id) {
          const text = heading.textContent || '';
          heading.id = `heading-${index}-${text.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '')}`;
        }
        
        return {
          element: heading,
          id: heading.id,
          text: heading.textContent || '',
          level: parseInt(heading.tagName.charAt(1))
        };
      });
    }
    
    buildTOC() {
      if (this.headings.length === 0) return;
      
      this.tocList.innerHTML = '';
      
      this.headings.forEach((heading, index) => {
        const li = document.createElement('li');
        li.className = 'toc-item';
        
        const a = document.createElement('a');
        a.href = `#${heading.id}`;
        a.className = 'toc-link';
        a.textContent = heading.text;
        a.setAttribute('data-level', heading.level.toString());
        a.style.animationDelay = `${0.1 + index * 0.05}s`;
        
        a.addEventListener('click', (e) => {
          e.preventDefault();
          this.scrollToHeading(heading.id);
        });
        
        li.appendChild(a);
        this.tocList.appendChild(li);
      });
    }
    
    setupEventListeners() {
      // Toggle TOC visibility
      if (this.tocToggle) {
        this.tocToggle.addEventListener('click', () => {
          this.tocContainer.classList.toggle('collapsed');
          
          // Save state in localStorage
          const isCollapsed = this.tocContainer.classList.contains('collapsed');
          localStorage.setItem('toc-collapsed', isCollapsed.toString());
        });
        
        // Restore collapsed state
        const savedState = localStorage.getItem('toc-collapsed');
        if (savedState === 'true') {
          this.tocContainer.classList.add('collapsed');
        }
      }
      
      // Update active section on scroll
      let ticking = false;
      window.addEventListener('scroll', () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            this.updateActiveSection();
            ticking = false;
          });
          ticking = true;
        }
      });
      
      // Update on resize
      window.addEventListener('resize', () => {
        setTimeout(() => this.updateActiveSection(), 100);
      });
    }
    
    updateActiveSection() {
      if (this.headings.length === 0) return;
      
      const scrollPosition = window.scrollY + 100; // Offset for better UX
      let activeHeading = null;
      
      // Find the currently visible heading
      for (let i = this.headings.length - 1; i >= 0; i--) {
        const heading = this.headings[i];
        const element = heading.element;
        
        if (element.offsetTop <= scrollPosition) {
          activeHeading = heading;
          break;
        }
      }
      
      // Update active state
      if (activeHeading && activeHeading.id !== this.currentActiveId) {
        // Remove previous active state
        const previousActive = this.tocList.querySelector('.toc-link.active');
        if (previousActive) {
          previousActive.classList.remove('active');
        }
        
        // Add new active state
        const newActive = this.tocList.querySelector(`[href="#${activeHeading.id}"]`);
        if (newActive) {
          newActive.classList.add('active');
          
          // Scroll TOC to show active item
          this.scrollTOCToActiveItem(newActive);
        }
        
        this.currentActiveId = activeHeading.id;
      }
    }
    
    scrollTOCToActiveItem(activeLink) {
      const tocNav = this.tocContainer.querySelector('.toc-nav');
      if (!tocNav) return;
      
      const activeRect = activeLink.getBoundingClientRect();
      const navRect = tocNav.getBoundingClientRect();
      
      if (activeRect.top < navRect.top || activeRect.bottom > navRect.bottom) {
        const scrollTop = activeLink.offsetTop - tocNav.offsetTop - tocNav.clientHeight / 2 + activeLink.clientHeight / 2;
        tocNav.scrollTo({
          top: scrollTop,
          behavior: 'smooth'
        });
      }
    }
    
    scrollToHeading(id) {
      const element = document.getElementById(id);
      if (!element) return;
      
      const headerOffset = 80; // Account for fixed headers
      const elementPosition = element.offsetTop - headerOffset;
      
      window.scrollTo({
        top: elementPosition,
        behavior: 'smooth'
      });
      
      // Update URL without triggering scroll
      if (history.pushState) {
        history.pushState(null, null, `#${id}`);
      }
    }
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new TableOfContents();
  });
  
  // Reinitialize for dynamic content (like page navigation)
  document.addEventListener('astro:page-load', () => {
    new TableOfContents();
  });
</script> 