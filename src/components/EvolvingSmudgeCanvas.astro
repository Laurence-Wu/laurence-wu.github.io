---
// EvolvingSmudgeCanvas.astro - Enhanced smudge painting canvas from plugin
export interface Props {
  class?: string;
}

const { class: className = "" } = Astro.props;
---

<div class={`evolving-smudge-canvas ${className}`} id="evolving-smudge-canvas">
  <canvas id="smudge-canvas" class="smudge-canvas"></canvas>
  
  <div class="canvas-controls">
    <button id="clear-btn" class="control-button" title="Clear Canvas">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M3 6h18l-1.5 13.5c-.1 1.1-.9 1.9-2 1.9H6.5c-1.1 0-1.9-.8-2-1.9L3 6z"/>
        <path d="M8 6V4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2v2"/>
      </svg>
    </button>
    
    <button id="save-btn" class="control-button" title="Save Artwork">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
        <polyline points="7,10 12,15 17,10"/>
        <line x1="12" y1="15" x2="12" y2="3"/>
      </svg>
    </button>
  </div>
  
  <div class="canvas-info">
    <span class="phase-indicator" id="phase-indicator">ðŸŽ¨</span>
    <span class="info-text">Evolving color palette â€¢ Paint your masterpiece</span>
  </div>
</div>

<style>
  .evolving-smudge-canvas {
    position: relative;
    width: 100%;
    height: 500px;
    padding: 20px;
    background: transparent;
    user-select: none;
    touch-action: none;
    contain: strict;
  }
  
  .evolving-smudge-canvas::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(145deg, rgba(255, 255, 255, 0.1), rgba(0, 0, 0, 0.2));
    border-radius: 25px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    z-index: 1;
  }
  
  .evolving-smudge-canvas::after {
    content: '';
    position: absolute;
    inset: 10px;
    background: rgba(0, 0, 0, 0.05);
    border-radius: 20px;
    border: 1px solid rgba(255, 255, 255, 0.05);
    box-shadow: 
      inset 0 2px 10px rgba(255, 255, 255, 0.1),
      inset 0 -2px 10px rgba(0, 0, 0, 0.2),
      0 20px 40px rgba(0, 0, 0, 0.3),
      0 10px 20px rgba(0, 0, 0, 0.2);
    z-index: 2;
  }
  
  .smudge-canvas {
    position: relative;
    width: calc(100% - 40px);
    height: calc(100% - 40px);
    margin: 20px;
    display: block;
    cursor: crosshair;
    background: #000;
    border-radius: 15px;
    z-index: 3;
    box-shadow: 
      0 8px 30px rgba(0, 0, 0, 0.4),
      0 4px 15px rgba(0, 0, 0, 0.3),
      inset 0 1px 2px rgba(255, 255, 255, 0.1);
    border: 2px solid rgba(255, 255, 255, 0.1);
  }
  
  .canvas-controls {
    position: absolute;
    bottom: 25px;
    right: 25px;
    display: flex;
    gap: 8px;
    z-index: 10;
  }
  
  .control-button {
    background: rgba(0, 0, 0, 0.8);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 10px;
    padding: 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    backdrop-filter: blur(15px);
    color: white;
    box-shadow: 
      0 4px 15px rgba(0, 0, 0, 0.3),
      inset 0 1px 2px rgba(255, 255, 255, 0.1);
  }
  
  .control-button:hover {
    background: rgba(0, 0, 0, 0.95);
    border-color: rgba(255, 255, 255, 0.5);
    transform: translateY(-3px);
    box-shadow: 
      0 6px 20px rgba(0, 0, 0, 0.4),
      inset 0 1px 3px rgba(255, 255, 255, 0.2);
  }
  
  .control-button:active {
    transform: translateY(0);
  }
  
  .canvas-info {
    position: absolute;
    bottom: 25px;
    left: 25px;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 10px 16px;
    border-radius: 25px;
    font-size: 0.9rem;
    backdrop-filter: blur(15px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    z-index: 10;
    box-shadow: 
      0 4px 15px rgba(0, 0, 0, 0.3),
      inset 0 1px 2px rgba(255, 255, 255, 0.1);
  }
  
  .phase-indicator {
    margin-right: 8px;
    font-size: 1.1rem;
  }
  
  .info-text {
    font-weight: 500;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .evolving-smudge-canvas {
      height: 400px;
      padding: 15px;
    }
    
    .smudge-canvas {
      width: calc(100% - 30px);
      height: calc(100% - 30px);
      margin: 15px;
    }
    
    .canvas-controls {
      bottom: 20px;
      right: 20px;
      gap: 6px;
    }
    
    .control-button {
      padding: 10px;
    }
    
    .canvas-info {
      bottom: 20px;
      left: 20px;
      padding: 8px 12px;
      font-size: 0.8rem;
    }
  }
  
  @media (max-width: 480px) {
    .evolving-smudge-canvas {
      height: 350px;
      padding: 10px;
    }
    
    .smudge-canvas {
      width: calc(100% - 20px);
      height: calc(100% - 20px);
      margin: 10px;
    }
  }
</style>

<script>
  interface Particle {
    x: number;
    y: number;
    vx: number;
    vy: number;
    color: string;
    life: number;
    maxLife: number;
  }

  class EvolvingSmudgeCanvas {
    private canvas: HTMLCanvasElement;
    private ctx!: CanvasRenderingContext2D;
    private particles: Particle[] = [];
    private isDrawing = false;
    private prevPosition = { x: 0, y: 0 };
    private colorPhase = 0;
    private animationFrameId: number | null = null;
    private colorInterval: number | null = null;
    
    // Enhanced color palettes from plugin
    private readonly colorPalettes = [
      ["#3498db", "#2980b9", "#1abc9c", "#16a085"], // Blue to Teal
      ["#e74c3c", "#c0392b", "#f39c12", "#d35400"], // Red to Orange
      ["#9b59b6", "#8e44ad", "#3498db", "#2980b9"], // Purple to Blue
      ["#f1c40f", "#f39c12", "#e67e22", "#d35400"], // Yellow to Orange
      ["#1abc9c", "#16a085", "#2ecc71", "#27ae60"], // Teal to Green
    ];
    
    constructor() {
      this.canvas = document.getElementById('smudge-canvas') as HTMLCanvasElement;
      if (!this.canvas) {
        console.error('Smudge canvas element not found!');
        return;
      }
      
      const ctx = this.canvas.getContext('2d');
      if (!ctx) {
        console.error('Could not get 2d context!');
        return;
      }
      this.ctx = ctx;
      
      this.init();
    }
    
    private init(): void {
      this.setupCanvas();
      this.setupEventListeners();
      this.startColorEvolution();
      this.startRenderLoop();
    }
    
    private setupCanvas(): void {
      this.resizeCanvas();
      this.ctx.fillStyle = "#000";
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      
      window.addEventListener('resize', this.handleResize);
    }
    
    private handleResize = (): void => {
      this.resizeCanvas();
    };
    
    private resizeCanvas(): void {
      const container = this.canvas.parentElement!;
      const rect = container.getBoundingClientRect();
      
      // Account for the padding and margins in the new 3D frame design
      this.canvas.width = rect.width - 40; // 20px margin on each side
      this.canvas.height = rect.height - 40; // 20px margin on top and bottom
      
      this.ctx.fillStyle = "#000";
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    }
    
    private getCurrentPalette(): string[] {
      return this.colorPalettes[Math.floor(this.colorPhase) % this.colorPalettes.length];
    }
    
    private getRandomColor(): string {
      const currentPalette = this.getCurrentPalette();
      const nextPaletteIndex = (Math.floor(this.colorPhase) + 1) % this.colorPalettes.length;
      const nextPalette = this.colorPalettes[nextPaletteIndex];

      const transitionProgress = this.colorPhase % 1;
      const colorIndex = Math.floor(Math.random() * currentPalette.length);

      const currentColor = currentPalette[colorIndex];
      const nextColor = nextPalette[colorIndex];

      const currentRGB = this.hexToRgb(currentColor);
      const nextRGB = this.hexToRgb(nextColor);

      const r = Math.floor(currentRGB.r * (1 - transitionProgress) + nextRGB.r * transitionProgress);
      const g = Math.floor(currentRGB.g * (1 - transitionProgress) + nextRGB.g * transitionProgress);
      const b = Math.floor(currentRGB.b * (1 - transitionProgress) + nextRGB.b * transitionProgress);

      return `rgb(${r}, ${g}, ${b})`;
    }
    
    private hexToRgb(hex: string): { r: number; g: number; b: number } {
      const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16),
      } : { r: 0, g: 0, b: 0 };
    }
    
    private startColorEvolution(): void {
      this.colorInterval = window.setInterval(() => {
        this.colorPhase += 0.005; // Slow evolution like plugin
      }, 100);
    }
    
    private setupEventListeners(): void {
      // Mouse events
      this.canvas.addEventListener('mousedown', this.startDrawing);
      this.canvas.addEventListener('mousemove', this.draw);
      this.canvas.addEventListener('mouseup', this.stopDrawing);
      this.canvas.addEventListener('mouseleave', this.stopDrawing);
      
      // Touch events
      this.canvas.addEventListener('touchstart', this.handleTouchStart);
      this.canvas.addEventListener('touchmove', this.handleTouchMove);
      this.canvas.addEventListener('touchend', this.stopDrawing);
      
      // Control buttons
      document.getElementById('clear-btn')?.addEventListener('click', this.clearCanvas);
      document.getElementById('save-btn')?.addEventListener('click', this.saveCanvas);
    }
    
    private getPosition(e: MouseEvent | TouchEvent): { x: number; y: number } {
      const rect = this.canvas.getBoundingClientRect();
      if ('touches' in e) {
        return {
          x: e.touches[0].clientX - rect.left,
          y: e.touches[0].clientY - rect.top,
        };
      } else {
        return {
          x: e.clientX - rect.left,
          y: e.clientY - rect.top,
        };
      }
    }
    
    private startDrawing = (e: MouseEvent): void => {
      this.isDrawing = true;
      const pos = this.getPosition(e);
      this.prevPosition = pos;
    };
    
    private draw = (e: MouseEvent): void => {
      if (!this.isDrawing) return;
      
      const pos = this.getPosition(e);
      this.createParticles(pos.x, pos.y, this.prevPosition.x, this.prevPosition.y);
      this.prevPosition = pos;
    };
    
    private stopDrawing = (): void => {
      this.isDrawing = false;
    };
    
    private handleTouchStart = (e: TouchEvent): void => {
      e.preventDefault();
      this.isDrawing = true;
      const pos = this.getPosition(e);
      this.prevPosition = pos;
    };
    
    private handleTouchMove = (e: TouchEvent): void => {
      e.preventDefault();
      if (!this.isDrawing) return;
      
      const pos = this.getPosition(e);
      this.createParticles(pos.x, pos.y, this.prevPosition.x, this.prevPosition.y);
      this.prevPosition = pos;
    };
    
    private createParticles(x: number, y: number, prevX: number, prevY: number): void {
      const dx = x - prevX;
      const dy = y - prevY;
      const distance = Math.sqrt(dx * dx + dy * dy);
      const angle = Math.atan2(dy, dx);

      const count = Math.max(Math.floor(distance / 5), 1);

      for (let i = 0; i < count; i++) {
        const t = count === 1 ? 0 : i / (count - 1);
        const px = prevX + dx * t;
        const py = prevY + dy * t;

        const spread = 2;
        const vx = Math.cos(angle) * 2 + (Math.random() - 0.5) * spread;
        const vy = Math.sin(angle) * 2 + (Math.random() - 0.5) * spread;

        const particleCount = 3 + Math.floor(Math.random() * 3);

        for (let j = 0; j < particleCount; j++) {
          this.particles.push({
            x: px + (Math.random() - 0.5) * 10,
            y: py + (Math.random() - 0.5) * 10,
            vx: vx + (Math.random() - 0.5) * 2,
            vy: vy + (Math.random() - 0.5) * 2,
            color: this.getRandomColor(),
            life: 50 + Math.random() * 100,
            maxLife: 50 + Math.random() * 100,
          });
        }
      }
    }
    
    private startRenderLoop(): void {
      const render = (): void => {
        this.ctx.fillStyle = "rgba(0, 0, 0, 0.03)";
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        for (let i = this.particles.length - 1; i >= 0; i--) {
          const particle = this.particles[i];
          
          particle.x += particle.vx;
          particle.y += particle.vy;
          particle.vx *= 0.98;
          particle.vy *= 0.98;
          particle.life--;
          
          if (particle.life <= 0) {
            this.particles.splice(i, 1);
            continue;
          }
          
          const opacity = particle.life / particle.maxLife;
          
          this.ctx.beginPath();
          this.ctx.arc(particle.x, particle.y, 3 + opacity * 5, 0, Math.PI * 2);
          this.ctx.fillStyle = particle.color.replace("rgb", "rgba").replace(")", `, ${opacity})`);
          this.ctx.fill();
        }
        
        this.animationFrameId = requestAnimationFrame(render);
      };
      
      render();
    }
    
    private clearCanvas = (): void => {
      this.ctx.fillStyle = "#000";
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      this.particles = [];
    };
    
    private saveCanvas = (): void => {
      const dataUrl = this.canvas.toDataURL("image/png");
      const link = document.createElement("a");
      link.download = `evolving-smudge-${new Date().toISOString().slice(0, 10)}.png`;
      link.href = dataUrl;
      link.click();
    };
    
    destroy(): void {
      if (this.animationFrameId) {
        cancelAnimationFrame(this.animationFrameId);
      }
      if (this.colorInterval) {
        window.clearInterval(this.colorInterval);
      }
      window.removeEventListener('resize', this.handleResize);
    }
  }
  
  // Initialize when DOM is ready
  function initializeEvolvingSmudgeCanvas(): void {
    const canvas = document.getElementById('smudge-canvas');
    if (canvas) {
      new EvolvingSmudgeCanvas();
    } else {
      setTimeout(initializeEvolvingSmudgeCanvas, 100);
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeEvolvingSmudgeCanvas);
  } else {
    initializeEvolvingSmudgeCanvas();
  }
</script> 